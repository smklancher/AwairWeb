//----------------------
// <auto-generated>
//     Quicktype from Postman: https://app.quicktype.io?share=jfQUdSI2IDP6CLQD0gts
// </auto-generated>
//----------------------
// ## Getting Started
// Welcome to Awair Developer APIs! This page aims to get you started quickly and explain
// some basic concepts.
//
// * [The Developer Console](#the-developer-console)
// * [Tiers & Quotas](#tiers--quotas)
// * [First Steps](#first-steps)
// * [Data Units](#data-units)
// * [Exploring with GraphQL](#exploring-with-graphql)
// * [Test Requests](#test-requests)
// * [What's Next?](#whats-next)
//
// ## The Developer Console
// The [Developer Console](https://developer.getawair.com) is your gateway to the Developer
// APIs. From here you can manage your account, get your account API token and register
// OAuth 2.0 clients.
//
// ### Access Token
// Your [Access Token](https://developer.getawair.com/console/access-token) is an API token
// that is automatically generated for your account. This token is all you need to start
// using our APIs, but note that which endpoints you are authorized to use depends on the
// permissions you have activated for your account or clients.
//
// ### OAuth 2.0 Clients
// OAuth 2.0 clients provide you with a way to create your own apps which can request access
// to your users' Awair data. These clients must be registered in the Developer Console
// first. After this step, your clients will be displayed in the OAuth 2.0 section of the
// developer console and you can use the information displayed there to implement the OAuth
// 2.0 token exchange flow. More information on this can be found in the [OAuth 2.0
// documentation](https://developer.getawair.com/console/oauth2-doc) section.
//
// ## Tiers & Quotas
// Your account has a Tier, which determines which endpoints you have access to and how many
// requests you can make on each endpoint per day (resets at midnight 00:00:00 UTC).
//
// List of Tiers:
//
// * Hobbyist (default)
// * Small Developer
// * Large Developer
// * Enterprise
// * Custom (coming soon!)
//
// The default Tier (Hobbyist) is assigned free of charge when you first get access to the
// Developer Console, but the number of requests per day (UTC) and list of available
// endpoints will be assigned a Quota based on your Tier (see below: [Tier
// Quotas](#tier-quotas)).
//
// Each endpoint requires permission to access it via your Tier. While our APIs are in
// `Private Beta`, Tiers are managed by the Awair Team, so for now you should [contact
// us](mailto:developer@getawair.com) if your account isn't automatically approved or you
// would like to request a higher Quota / Tier.
//
// To lookup your current Tier and Quotas, you can make a request on the [**User Info**
// endpoint](#6cfeb8fe-4910-4d4e-b11d-e7a2b62220b6) (link to documentation section):
//
// ```
// curl -X GET https://developer-apis.awair.is/v1/users/self -H 'authorization: Bearer
// {{yourAccessToken}}'
// ```
//
// ### Tier Quotas
//
// | Endpoint              | Hobbyist | Small Developer [^1] | Large Developer [^1] |
// Enterprise [^2] | 
//
// |-----------------------|----------|----------------------|----------------------|-----------------| 
// |                       |          |                      |
// |                 | 
// | **User Details**      |          |                      |
// |                 | 
// |                       |          |                      |
// |                 | 
// | USER_INFO             | ∞        | ∞                    | ∞                    |
// ∞               | 
// | USER_DEVICE_LIST      | ∞        | ∞                    | ∞                    |
// ∞               |
// | DEVICE_API_USAGE      | ∞        | ∞                    | ∞                    |
// ∞               |
// |                       |          |                      |
// |                 | 
// | **Org Details**       |          |                      |
// |                 | 
// |                       |          |                      |
// |                 | 
// | ORG_LIST              | -        | -                    | -                    |
// ∞               | 
// | ORG_USERS_INFO        | -        | -                    | -                    |
// 86400           | 
// | ORG_GROUPS            | -        | -                    | -                    |
// 86400           | 
// | ORG_FLOORS            | -        | -                    | -                    |
// 86400           | 
// | ORG_DEVICES           | -        | -                    | -                    |
// 86400           | 
// | ORG_DEVICE_API_USAGE  | -        | -                    | -                    |
// 86400           | 
// |                       |          |                      |
// |                 | 
// | **AirData**           |          |                      |
// |                 | 
// |                       |          |                      |
// |                 | 
// | LATEST                | 300      | 15000                | 30000                |
// 86400           | 
// | RAW                   | 500      | 15000                | 30000                |
// 86400           | 
// | FIVE_MIN              | 300      | 15000                | 30000                |
// 86400           | 
// | FIFTEEN_MIN           | 100      | 15000                | 30000                |
// 86400           | 
// |                       |          |                      |
// |                 | 
// | **Device Management** |          |                      |
// |                 | 
// |                       |          |                      |
// |                 | 
// | PUT_DEVICE_NAME       | 300      | 15000                | 30000                |
// 86400           | 
// | GET_DISPLAY_MODE      | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_DISPLAY_MODE      | 300      | 15000                | 30000                |
// 86400           | 
// | GET_KNOCKING_MODE     | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_KNOCKING_MODE     | 300      | 15000                | 30000                |
// 86400           | 
// | GET_LED_MODE          | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_LED_MODE          | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_LOCATION          | 300      | 15000                | 30000                |
// 86400           | 
// | GET_POWER_STATUS      | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_PREFERENCE        | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_ROOM_TYPE         | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_SPACE_TYPE        | 300      | 15000                | 30000                |
// 86400           | 
// | GET_TIMEZONE          | 300      | 15000                | 30000                |
// 86400           | 
// | PUT_TIMEZONE          | 300      | 15000                | 30000                |
// 86400           | 
// |                       |          |                      |
// |                 | 
//
//
// [^1]: upgrade options coming soon!
//
// [^2]: requires an [Awair Dashboard](https://dashboard.getawair.com) subscription
//
//
// ## First Steps
// All of our endpoints use an [Access
// Token](https://developer.getawair.com/console/access-token) for authorization. It should
// be included in the Authorization Header (as a `Bearer` token) for any request. For
// example:
//
// ```
// curl -X GET https://developer-apis.awair.is/ -H 'authorization: Bearer
// {{yourAccessToken}}'
// ```
//
// The Access Token can be copied straight from the [Access
// Token](https://developer.getawair.com/console/access-token) section if you want use your
// personal token (to access your devices or authorized Organization devices), or generated
// through the OAuth 2.0 flow (to access data on behalf of your users).
//
// All the endpoints are documented in our [API
// documentation](http://docs.developer.getawair.com/).
//
// ## Data Units
// A full guide to the units returned through our Developer API and an explanation of the
// Awair Score can be found in the [data
// documentation](https://developer.getawair.com/console/data-docs) section (login
// required).
//
// ## Exploring with GraphQL
// Most of our endpoints are exposed through GraphQL. The GraphiQL tool is a very simple
// (and our favorite) way of exploring what is possible with our API. You can access
// GraphiQL by going to:
//
// `https://developer-apis.awair.is/graphql?accessToken={{YourTokenHere}}`
//
// You will be presented with a schema of the endpoints you can access depending on your
// Tier, so don't worry if all the endpoints in our [API
// documentation](http://docs.developer.getawair.com/) do not appear.
//
// [Take me to
// GraphiQL](https://developer-apis.awair.is/graphql?accessToken={{YourTokenHere}})
//
// ## Test Requests
// For easier testing, we've created a set of tokens that simulate fake accounts with a
// given Tier. Dummy data is returned if the request is authorized, HTTP 401 if not.
//
// The examples in the documentation all use the Hobbyist Tier Access Token, but we have
// listed the other dummy tokens below as well as download links to [Postman Environment
// .json files with example
// variables](https://learning.getpostman.com/docs/postman/environments_and_globals/variables/)
// so that you can test in your own Environment.
//
// ### Hobbyist:
//
// `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiRFVNTVktSE9CQllJU1QifQ.hzjhIpGljqCZ8vCrOr89POy_ENDPYQXsnzGslP01krI`
//
// [Download Postman Environment Hobbyist
// Variables](https://links.awair.is/download/postman/[TEST]%20Hobbyist.postman_environment.json)
//
// ### Small Developer:
//
// `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiRFVNTVktU01BTExfREVWRUxPUEVSIn0.amOu5uy-0UeBDRLd6uhqsbkUEyx13-4QdBrV1S3z2W8`
//
// [Download Postman Environment Small Developer
// Variables](https://links.awair.is/download/postman/%5BTEST%5D+Small+Developer.postman_environment.json)
//
// ### Large Developer:
//
// `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiRFVNTVktTEFSR0VfREVWRUxPUEVSIn0.JmP9a0eGjgYRlmri5BjNj4h1hlAZ-7yFOjcIZjyzypA`
//
// [Download Postman Environment Large Developer
// Variables](https://links.awair.is/download/postman/%5BTEST%5D+Large+Developer.postman_environment.json)
//
// ### Enterprise:
//
// `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiRFVNTVktRU5URVJQUklTRSJ9.bOM9rcABF9HKFHtxzF9kx8h9fv3CfvUIzveLFDRGrXs`
//
// [Download Postman Environment Enterprise
// Variables](https://links.awair.is/download/postman/%5BTEST%5D+Enterprise.postman_environment.json)
//
// ## What's Next?
// By using our [API documentation](https://docs.developer.getawair.com/) to craft requests
// you should be well armed to create awesome projects with our APIs, but our documentation
// can always be improved so don't hesitate to reach out with feedback or suggestions!
//
// We are working on putting together a set of example code snippets, which should
// illustrate some uses of the API more clearly.

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Devices
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/org-users/devices?user_id={{user_id}}&user_id={{user_id2}}
    ///
    /// Get Devices owned by specified Organization members
    /// </summary>
    public partial class Devices
    {
        [JsonProperty("devices")]
        public List<DevicesDevice> DevicesDevices { get; set; }
    }

    public partial class DevicesDevice
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("preference", NullValueHandling = NullValueHandling.Ignore)]
        public string Preference { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [JsonProperty("roomType", NullValueHandling = NullValueHandling.Ignore)]
        public string RoomType { get; set; }

        [JsonProperty("deviceType", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceType { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("spaceType", NullValueHandling = NullValueHandling.Ignore)]
        public string SpaceType { get; set; }

        [JsonProperty("deviceUUID", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceUuid { get; set; }

        [JsonProperty("deviceId", NullValueHandling = NullValueHandling.Ignore)]
        public long? DeviceId { get; set; }

        [JsonProperty("locationName", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationName { get; set; }

        [JsonProperty("userId", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? UserId { get; set; }

        [JsonProperty("devices", NullValueHandling = NullValueHandling.Ignore)]
        public List<DeviceDevice> Devices { get; set; }
    }

    public partial class DeviceDevice
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("deviceType")]
        public string DeviceType { get; set; }

        [JsonProperty("owner")]
        public Owner Owner { get; set; }

        [JsonProperty("deviceId")]
        public long DeviceId { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public Group Group { get; set; }
    }

    public partial class Group
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Owner
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }
    }

    /// <summary>
    /// User Info
    ///
    /// GET https://developer-apis.awair.is/v1/users/self
    ///
    /// Get the User's information, permissions, quotas, and usages
    /// </summary>
    public partial class UserInfo
    {
        [JsonProperty("usages")]
        public List<Usage> Usages { get; set; }

        [JsonProperty("tier")]
        public string Tier { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("dobYear")]
        public long DobYear { get; set; }

        [JsonProperty("permissions")]
        public List<Permission> Permissions { get; set; }

        [JsonProperty("sex")]
        public string Sex { get; set; }

        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }
    }

    public partial class Permission
    {
        [JsonProperty("scope")]
        public string Scope { get; set; }

        [JsonProperty("quota")]
        public long Quota { get; set; }
    }

    public partial class Usage
    {
        [JsonProperty("scope")]
        public string Scope { get; set; }

        [JsonProperty("usage")]
        public long UsageUsage { get; set; }
    }

    /// <summary>
    /// Device API Usage
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/api-usages
    ///
    /// Get the number of calls made to a device owned by the organization per quota cycle (24
    /// hours), which can be compared to the allotted permissions quotas under /users/self
    /// </summary>
    public partial class DeviceApiUsage
    {
        [JsonProperty("usages")]
        public List<Usage> Usages { get; set; }
    }

    /// <summary>
    /// Organization List
    ///
    /// GET https://developer-apis.awair.is/v1/org-users/self/orgs
    ///
    /// Get a list of Organizations the User belong to
    /// </summary>
    public partial class OrganizationList
    {
        [JsonProperty("organizations")]
        public List<Organization> Organizations { get; set; }
    }

    public partial class Organization
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("isActivated", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActivated { get; set; }
    }

    /// <summary>
    /// Users Info
    ///
    /// GET https://developer-apis.awair.is/v1/orgs/{{org_id}}/org-users
    ///
    /// Get all the Users' information in the Organization
    /// </summary>
    public partial class UsersInfo
    {
        [JsonProperty("orgUsers")]
        public List<OrgUser> OrgUsers { get; set; }
    }

    public partial class OrgUser
    {
        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("userId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UserId { get; set; }

        [JsonProperty("role")]
        public string Role { get; set; }
    }

    /// <summary>
    /// Groups
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/org-users/groups?user_id={{user_id}}&user_id={{user_id2}}
    ///
    /// Get Groups in the Organization that specified Users belong to
    /// </summary>
    public partial class Groups
    {
        [JsonProperty("usersGroups")]
        public List<UsersGroup> UsersGroups { get; set; }
    }

    public partial class UsersGroup
    {
        [JsonProperty("userId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UserId { get; set; }

        [JsonProperty("groups")]
        public List<Group> Groups { get; set; }
    }

    /// <summary>
    /// Floors
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/org-users/floors?user_id={{user_id}}&user_id={{user_id2}}
    ///
    /// Get Floors in an Organization that Devices of specified Users are located in
    /// </summary>
    public partial class Floors
    {
        [JsonProperty("floors")]
        public List<FloorsFloor> FloorsFloors { get; set; }
    }

    public partial class FloorsFloor
    {
        [JsonProperty("userId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UserId { get; set; }

        [JsonProperty("floors")]
        public List<FloorFloor> Floors { get; set; }
    }

    public partial class FloorFloor
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("floorPlan")]
        public FloorPlan FloorPlan { get; set; }
    }

    public partial class FloorPlan
    {
        [JsonProperty("imageUrl")]
        public string ImageUrl { get; set; }

        [JsonProperty("floorDevices")]
        public List<FloorDevice> FloorDevices { get; set; }
    }

    public partial class FloorDevice
    {
        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("x")]
        public double X { get; set; }

        [JsonProperty("y")]
        public double Y { get; set; }
    }

    /// <summary>
    /// Latest AirData
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/air-data/latest?fahrenheit={{fahrenheit}}
    ///
    /// Get the latest AirData closest to Current DateTime for the specified Device owned by the
    /// Organization. If no AirData in the last 10 minutes, it will return null.
    /// </summary>
    public partial class LatestAirData
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("sensors")]
        public List<Index> Sensors { get; set; }

        [JsonProperty("indices")]
        public List<Index> Indices { get; set; }
    }

    public partial class Index
    {
        [JsonProperty("comp")]
        public Comp Comp { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }
    }

    /// <summary>
    /// Raw AirData
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/air-data/raw?from={{from}}&to={{to}}&limit={{limit}}&desc={{desc}}&fahrenheit={{fahrenheit}}
    ///
    /// Get AirData for the specified Device owned by the Organization in raw format. Maximum
    /// time range of AirData points returned: 1 hour (~360 data points of 10 second intervals)
    /// </summary>
    public partial class RawAirData
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    /// <summary>
    /// 5-min-avg AirData
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/air-data/5-min-avg?from={{from}}&to={{to}}&limit={{limit}}&desc={{desc}}&fahrenheit={{fahrenheit}}
    ///
    /// Get AirData for the specified Device owned by the Organization of 5-min-avg blocks.
    /// Maximum time range of AirData points returned: 24 hours (~288 data points of 5 minute
    /// blocks)
    /// </summary>
    public partial class The5MinAvgAirData
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    /// <summary>
    /// 15-min-avg AirData
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/air-data/15-min-avg?from={{from}}&to={{to}}&limit={{limit}}&desc={{desc}}&fahrenheit={{fahrenheit}}
    ///
    /// Get AirData for the specified Device owned by the Organization of 15-min-avg blocks.
    /// Maximum time range of AirData points returned: 7 days (~672 data points of 15 minute
    /// averaged blocks)
    /// </summary>
    public partial class The15MinAvgAirData
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    /// <summary>
    /// Device Display Mode
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/display
    ///
    /// Change Display mode of a Device
    /// </summary>
    public partial class DeviceDisplayMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Knocking Mode
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/knocking
    ///
    /// Change the knocking mode of a Device (ONLY for awair & awair-r2)
    /// </summary>
    public partial class DeviceKnockingMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device LED Mode
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/led
    ///
    /// Change Led mode of a Device
    /// </summary>
    public partial class DeviceLedMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("brightness", NullValueHandling = NullValueHandling.Ignore)]
        public long? Brightness { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Location
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/location
    ///
    /// Update a Device location's latitude and longitude
    /// </summary>
    public partial class DeviceLocation
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Name
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/name
    ///
    /// Update name of a Device
    /// </summary>
    public partial class DeviceName
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Power Status
    ///
    /// GET https://developer-apis.awair.is/v1/devices/:device_type/:device_id/power-status
    ///
    /// Get battery percentage and plugged status of the Device
    /// </summary>
    public partial class DevicePowerStatus
    {
        [JsonProperty("percentage")]
        public long Percentage { get; set; }

        [JsonProperty("plugged")]
        public bool Plugged { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }
    }

    /// <summary>
    /// Device Preference
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/preference
    ///
    /// Update preference of a Device
    /// </summary>
    public partial class DevicePreference
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Room Type
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/room
    ///
    /// Update Device's room type
    /// </summary>
    public partial class DeviceRoomType
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Space Type
    ///
    /// PUT https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/space
    ///
    /// Update Device's Space Type
    /// </summary>
    public partial class DeviceSpaceType
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Device Timezone
    ///
    /// GET https://developer-apis.awair.is/v1/devices/{{device_type}}/{{device_id}}/timezone
    ///
    /// Get Timezone setting of a Device
    /// </summary>
    public partial class DeviceTimezone
    {
        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    /// <summary>
    /// Org Device Display Mode
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/display
    ///
    /// Change Display mode of an Org Device
    /// </summary>
    public partial class OrgDeviceDisplayMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Knocking Mode
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/knocking
    ///
    /// Change the knocking mode of an Org Device (ONLY for awair & awair-r2)
    /// </summary>
    public partial class OrgDeviceKnockingMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device LED Mode
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/led
    ///
    /// Change Led mode of an Org Device
    /// </summary>
    public partial class OrgDeviceLedMode
    {
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        [JsonProperty("brightness", NullValueHandling = NullValueHandling.Ignore)]
        public long? Brightness { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Location
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/location
    ///
    /// Update Org Device location's latitude and longitude
    /// </summary>
    public partial class OrgDeviceLocation
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Name
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/name
    ///
    /// Update name of an Org Device
    /// </summary>
    public partial class OrgDeviceName
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Power Status
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/:org_id/devices/:device_type/:device_id/power-status
    ///
    /// Get Power status of an Org Device (Omni only)
    /// </summary>
    public partial class OrgDevicePowerStatus
    {
        [JsonProperty("percentage")]
        public long Percentage { get; set; }

        [JsonProperty("plugged")]
        public bool Plugged { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }
    }

    /// <summary>
    /// Org Device Preference
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/preference
    ///
    /// Update preference of an Org Device
    /// </summary>
    public partial class OrgDevicePreference
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Room Type
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/room
    ///
    /// Update Org Device's room type
    /// </summary>
    public partial class OrgDeviceRoomType
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Space Type
    ///
    /// PUT
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/space
    ///
    /// Update Org Device's Space Type
    /// </summary>
    public partial class OrgDeviceSpaceType
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// Org Device Timezone
    ///
    /// GET
    ///
    /// https://developer-apis.awair.is/v1/orgs/{{org_id}}/devices/{{device_type}}/{{device_id}}/timezone
    ///
    /// Get Timezone setting of an Org Device
    /// </summary>
    public partial class OrgDeviceTimezone
    {
        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public enum Comp { Co2, Humid, Lux, Pm25, SplA, Temp, Voc };

    public partial class Devices
    {
        public static Devices FromJson(string json) => JsonConvert.DeserializeObject<Devices>(json, QuickType.Converter.Settings);
    }

    public partial class UserInfo
    {
        public static UserInfo FromJson(string json) => JsonConvert.DeserializeObject<UserInfo>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceApiUsage
    {
        public static DeviceApiUsage FromJson(string json) => JsonConvert.DeserializeObject<DeviceApiUsage>(json, QuickType.Converter.Settings);
    }

    public partial class OrganizationList
    {
        public static OrganizationList FromJson(string json) => JsonConvert.DeserializeObject<OrganizationList>(json, QuickType.Converter.Settings);
    }

    public partial class UsersInfo
    {
        public static UsersInfo FromJson(string json) => JsonConvert.DeserializeObject<UsersInfo>(json, QuickType.Converter.Settings);
    }

    public partial class Groups
    {
        public static Groups FromJson(string json) => JsonConvert.DeserializeObject<Groups>(json, QuickType.Converter.Settings);
    }

    public partial class Floors
    {
        public static Floors FromJson(string json) => JsonConvert.DeserializeObject<Floors>(json, QuickType.Converter.Settings);
    }

    public partial class LatestAirData
    {
        public static LatestAirData FromJson(string json) => JsonConvert.DeserializeObject<LatestAirData>(json, QuickType.Converter.Settings);
    }

    public partial class RawAirData
    {
        public static RawAirData FromJson(string json) => JsonConvert.DeserializeObject<RawAirData>(json, QuickType.Converter.Settings);
    }

    public partial class The5MinAvgAirData
    {
        public static The5MinAvgAirData FromJson(string json) => JsonConvert.DeserializeObject<The5MinAvgAirData>(json, QuickType.Converter.Settings);
    }

    public partial class The15MinAvgAirData
    {
        public static The15MinAvgAirData FromJson(string json) => JsonConvert.DeserializeObject<The15MinAvgAirData>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceDisplayMode
    {
        public static DeviceDisplayMode FromJson(string json) => JsonConvert.DeserializeObject<DeviceDisplayMode>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceKnockingMode
    {
        public static DeviceKnockingMode FromJson(string json) => JsonConvert.DeserializeObject<DeviceKnockingMode>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceLedMode
    {
        public static DeviceLedMode FromJson(string json) => JsonConvert.DeserializeObject<DeviceLedMode>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceLocation
    {
        public static DeviceLocation FromJson(string json) => JsonConvert.DeserializeObject<DeviceLocation>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceName
    {
        public static DeviceName FromJson(string json) => JsonConvert.DeserializeObject<DeviceName>(json, QuickType.Converter.Settings);
    }

    public partial class DevicePowerStatus
    {
        public static DevicePowerStatus FromJson(string json) => JsonConvert.DeserializeObject<DevicePowerStatus>(json, QuickType.Converter.Settings);
    }

    public partial class DevicePreference
    {
        public static DevicePreference FromJson(string json) => JsonConvert.DeserializeObject<DevicePreference>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceRoomType
    {
        public static DeviceRoomType FromJson(string json) => JsonConvert.DeserializeObject<DeviceRoomType>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceSpaceType
    {
        public static DeviceSpaceType FromJson(string json) => JsonConvert.DeserializeObject<DeviceSpaceType>(json, QuickType.Converter.Settings);
    }

    public partial class DeviceTimezone
    {
        public static DeviceTimezone FromJson(string json) => JsonConvert.DeserializeObject<DeviceTimezone>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceDisplayMode
    {
        public static OrgDeviceDisplayMode FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceDisplayMode>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceKnockingMode
    {
        public static OrgDeviceKnockingMode FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceKnockingMode>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceLedMode
    {
        public static OrgDeviceLedMode FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceLedMode>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceLocation
    {
        public static OrgDeviceLocation FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceLocation>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceName
    {
        public static OrgDeviceName FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceName>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDevicePowerStatus
    {
        public static OrgDevicePowerStatus FromJson(string json) => JsonConvert.DeserializeObject<OrgDevicePowerStatus>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDevicePreference
    {
        public static OrgDevicePreference FromJson(string json) => JsonConvert.DeserializeObject<OrgDevicePreference>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceRoomType
    {
        public static OrgDeviceRoomType FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceRoomType>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceSpaceType
    {
        public static OrgDeviceSpaceType FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceSpaceType>(json, QuickType.Converter.Settings);
    }

    public partial class OrgDeviceTimezone
    {
        public static OrgDeviceTimezone FromJson(string json) => JsonConvert.DeserializeObject<OrgDeviceTimezone>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Devices self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this UserInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceApiUsage self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrganizationList self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this UsersInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Groups self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Floors self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this LatestAirData self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this RawAirData self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this The5MinAvgAirData self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this The15MinAvgAirData self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceDisplayMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceKnockingMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceLedMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceLocation self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceName self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DevicePowerStatus self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DevicePreference self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceRoomType self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceSpaceType self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this DeviceTimezone self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceDisplayMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceKnockingMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceLedMode self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceLocation self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceName self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDevicePowerStatus self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDevicePreference self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceRoomType self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceSpaceType self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OrgDeviceTimezone self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    public static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CompConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            Formatting = Formatting.Indented,
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CompConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Comp) || t == typeof(Comp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "co2":
                    return Comp.Co2;
                case "humid":
                    return Comp.Humid;
                case "lux":
                    return Comp.Lux;
                case "pm25":
                    return Comp.Pm25;
                case "spl_a":
                    return Comp.SplA;
                case "temp":
                    return Comp.Temp;
                case "voc":
                    return Comp.Voc;
            }
            throw new Exception("Cannot unmarshal type Comp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Comp)untypedValue;
            switch (value)
            {
                case Comp.Co2:
                    serializer.Serialize(writer, "co2");
                    return;
                case Comp.Humid:
                    serializer.Serialize(writer, "humid");
                    return;
                case Comp.Lux:
                    serializer.Serialize(writer, "lux");
                    return;
                case Comp.Pm25:
                    serializer.Serialize(writer, "pm25");
                    return;
                case Comp.SplA:
                    serializer.Serialize(writer, "spl_a");
                    return;
                case Comp.Temp:
                    serializer.Serialize(writer, "temp");
                    return;
                case Comp.Voc:
                    serializer.Serialize(writer, "voc");
                    return;
            }
            throw new Exception("Cannot marshal type Comp");
        }

        public static readonly CompConverter Singleton = new CompConverter();
    }
}

