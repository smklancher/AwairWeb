@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using System.Diagnostics
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject AwairBlazor.Services.AppData appData
@inject AwairBlazor.Services.ApiService api

<h2>@title</h2>

<DetailToggle OnDetailClicked="UpdateChart"></DetailToggle>

<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code
{
    [Parameter]
    public QuickType.DeviceProperty Sensor { get; set; }

    LineConfig _lineConfig=ChartHelper.LineChartConfig();
    ChartJsLineChart _lineChartJs=new();

    private string title = "(loading...)";

    protected override async Task OnInitializedAsync()
    {
        await appData.InitAsync();
        await UpdateChart();
    }

    private async Task UpdateChart()
    {
        title = $"{appData.CurrentTimeToggleLabel} {Sensor} Chart (Loading...)";

        StateHasChanged();

        var multiraw = await api.GetRawData();
        ChartHelper.AddRawDataToChartData(Sensor, multiraw, _lineConfig);
        
        title = $"{appData.CurrentTimeToggleLabel} {Sensor} Chart";
    }
}